日本瑞萨
RH850 + RCAR

日本确实开发了几种类似RTOS的操作系统，专门用于汽车电子和其他嵌入式系统。
一个著名的例子是TRON（The Real-Time Operating system Nucleus），这是由坂村健教授于1984年开发的1。
TRON系统在日本和全球范围内广泛应用于各种嵌入式设备，包括汽车电子系统1。

TRON系统更适合复杂和高安全性要求的应用，如汽车电子，而FreeRTOS则更适合资源受限的小型嵌入式系统。
TRON 操作系统（The Real-time Operating system Nucleus）是一种实时操作系统，广泛应用于嵌入式系统中。它的任务（task）是一个基本的调度单位，类似于线程，但有一些区别：

任务（task）：在 TRON 中，任务是一个独立的执行单元，具有自己的上下文和堆栈。任务可以被调度和执行，类似于线程。
线程（thread）：线程通常是指在同一进程内共享资源的执行单元。多个线程可以共享同一个进程的地址空间和资源。
在 TRON 操作系统中，任务管理和调度是核心功能之一。任务可以具有不同的优先级，操作系统根据优先级进行调度，以确保实时性要求。

ITRON（Industrial the Real-Time Operating System Nucleus）是 TRON 项目的一部分，专门为嵌入式系统设计的实时操作系统规范。自1984年起，TRON 项目就开始研究和发布适用于不同应用领域的操作系统规范1。

ITRON 规范定义了一个标准的实时内核，适用于各种小规模嵌入式系统。它具有以下特点：

多任务支持：支持多个任务的并发执行。
优先级调度：基于优先级的任务调度机制。
实时性：确保任务在严格的时间限制内完成。
可扩展性：适用于从8位到32位的微控制器1。
ITRON 规范已经被广泛应用于各种嵌入式系统中，如消费电子、通信设备、医疗设备等

一个项目可以使用多个操作系统（OS），包括OSEK OS和INTEGRITY OS，特别是在复杂的嵌入式系统中。这种多操作系统的架构通常用于满足不同的功能需求和实时性要求。

典型应用场景：
汽车电子系统：在汽车中，OSEK OS可能用于控制发动机管理系统等实时性要求高的任务，而INTEGRITY OS可能用于信息娱乐系统或高级驾驶辅助系统（ADAS），这些系统需要更高的安全性和可靠性12。
航空电子系统：在飞机中，INTEGRITY OS可以用于飞行控制系统，确保高安全性和实时性，而OSEK OS可以用于其他辅助系统2。
集成方法：
虚拟化：使用虚拟化技术在同一硬件平台上运行多个操作系统。
多核处理器：在多核处理器上，每个核心运行不同的操作系统。
通信接口：通过定义明确的通信接口和协议，使不同操作系统之间能够有效地交换数据和协同工作。
这种多操作系统的架构可以充分利用各个操作系统的优势，满足复杂系统的多样化需求。

MICROSAR 包含了INTEGRITY，INTEGRITY通过配置一些新的功能就成了MICROSAR。

IOC 实现多核通讯

2类中断：当前主要用的2类中断

最低优先级的中断可以打断最高优先级的任务

一类中断被重点后直接执行终端执行函数

Autusor 优先级上限协议避免优先级反转和死锁
自旋锁

AD 使用的是SC3 级别（包含内存保护，调度表，OSEK OS）的AUTOSAR OS






相机
sony 5600s(YCbCr -> YUV422bit)
（索尼半导体解决方案公司（Sony Semiconductor Solutions Corporation, SSS）
图像传感器：SSS在全球图像传感器市场占据领先地位，提供高性能的图像传感器，广泛应用于智能手机、数码相机、汽车电子等领域。）

ISX019 和 MAX96701
ISX019 和 MAX96701 是用于汽车摄像系统的组件，各自具有不同的功能：

ISX019
制造商：索尼半导体解决方案公司。
描述：ISX019 是一个系统芯片（SoC），结合了高性能图像传感器和处理引擎，专为汽车环视和后视摄像头应用设计。
特点：包括先进的图像处理能力，适用于各种光照条件下的高质量图像捕捉。
MAX96701
制造商：模拟器件公司（Analog Devices）。
描述：MAX96701 是一个14位千兆多媒体串行链路（GMSL）串行器，用于通过同轴电缆或屏蔽双绞线（STP）电缆传输高速视频数据。
特点：支持高带宽模式、错误检测和控制数据的重传，非常适合汽车摄像头应用。

这些组件通常一起使用在汽车摄像系统中，以确保高质量的图像捕捉和可靠的数据传输。ISX019 负责捕捉和处理图像，而 MAX96701 则将数据串行化，以便传输到中央处理单元或显示器。



功能实施：
夜间亮度调整

实现方式：
1）构建存放0-255亮度对应亮度值的亮度信息表。设置矫正系数，计算出亮度0~255经过矫正后对应亮度值。
（矫正系数 伽马值， 当gamma < 1 时，在低灰度值区域内，动态范围变大，图像对比度增强； 当高灰度值区域内，动态范围变小，图像对比度降低，同时，图像整体的灰度值变大；
                    当gamma > 1时，低灰度值区域的动态范围变小，高灰度值区域的动态范围变大，降低了低灰度值区域图像对比度，提高了高灰度值区域图像对比度，同时图像整体的灰度值变小）
伽马值（Gamma Value）
Gamma < 1：
低灰度值区域：动态范围变大，图像对比度增强。
高灰度值区域：动态范围变小，图像对比度降低。
整体效果：图像整体的灰度值变大，图像看起来更亮。

Gamma > 1：
低灰度值区域：动态范围变小，图像对比度降低。
高灰度值区域：动态范围变大，图像对比度增强。
整体效果：图像整体的灰度值变小，图像看起来更暗。

当伽马值小于1时，低灰度值区域的对比度增强，高灰度值区域的对比度降低，整体图像变亮。
当伽马值大于1时，低灰度值区域的对比度降低，高灰度值区域的对比度增强，整体图像变暗

2）每200ms读取左右摄像头亮度信息，根据当前环境亮度值设置日/夜间模式，进行亮度信息表的切换，
3）在日间模式时，使用正常的亮度表，正常显示；
夜间模式下，使用进行亮度矫正的亮度表，进行亮度调整，提升图像亮度，以适应夜间视野不佳的场景。


Camera Retry
功能介绍：
在检测到帧不更新导致画面卡住的情况时，可以通过请求相机重启来尝试恢复画面正常。
（判定帧不更新，vin信号丢失的情况，持续300ms未检测到有效帧）
判定帧不更新的原理：
通过读取RCar芯片 VIN模块的 (video input module) 状态寄存器 的FBS（Frame Buffer Status）位来获取帧缓冲区状态，
若读取到没有有效帧buffer，则将中断状态设置为NO_SIGNAL
如果帧数和行数与上次相同，则也将中断状态设置为NO_SIGNAL

实现方式：
1）帧不更新的判定
通过读取RCar芯片 VIN模块的 (video input module) 状态寄存器 的FBS（Frame Buffer Status）位来获取帧缓冲区状态，
若读取到没有有效帧buffer，则将vin中断状态设置为NO_SIGNAL
如果帧数和行数与上次相同，也将vin中断状态设置为NO_SIGNAL
2）相机重启请求时机
每500ms从共享内存读取四个相机的vin状态，在vin信号丢失持续3s时，执行对应相机的重启。


Skeleton view 优化
skeleton view(透明底盘）功能介绍：
通过虚拟视角模拟，坐标系转换，实现车底动态画面显示。

功能原理：
1）坐标系转换实现不同视角画面的呈现
front camera 画面 -> skeleton 画面 映射关系的创建



每隔12.5cm备份一帧图像


1）当前备份图像和备份图像
车辆分别在A,B,C,D时刻拍摄了，pic1，pic2, pic3, pic4
在前摄像头拍摄一张图片时，会存储对应图片拍摄时，车辆的后轴中心在世界坐标中的坐标，车身的偏移角度等信息。

2)假设车辆在D时刻时需要选取一张图像用于车底的画面显示
D时刻的车辆位置信息 -> 计算D时刻骨架区域的位置

备份图像1~3时的车辆位置 -> 计算A,B,C时刻，备份图像的可用于骨架显示的区域

如果D时刻骨架视图的位置在A,B,C时刻备份图像的可用区域内，则表明图像1~3可用，反之不可用
若备份图像可用，则计算D时刻车辆位置信息与备份可用图像时的车辆位置距离
最后优先选取距离当前车辆位置最近的备份图像

2）可用图像的判断
1.通过判断当前车的前轴中心是否在

矩形 淘汰距离过远的

6变形


RGB out time reduce
问题描述：
R档出图时间不在设计标准的1.9s内
结果：
修改后将time 
从2.04s -> 1.59s
问题原因：
OSD复制进程和ROMCheck 进程同时执行各自的FlashMemory进程同时执行各自的FlashMemory读取，FlashMemory 读取排除控制延长了OSD复制处理时间，这反过来又延长了第一次静音时间。
（ROMCheck 是通过读取ROM数据，计算校验和，并于预期的校验和进行比较，来验证ROM数据的完整性。如果校验失败，打印错误信息并返回错误码）
mute off 静音消除时间是相机初始化结束200ms或更长时间
解决方法：
通过增加信号量和信号量等待时间，来解决task间的同步问题

进程创建：当一个进程被创建时，操作系统会为其分配一个新的页表。
虚拟内存映射：内存管理单元（MMU）将虚拟内存地址映射到物理内存地址，并将映射关系存储在页表中。
主存和缓存：主存（物理内存）存储当前运行所需的指令和数据，CPU缓存中存储了常用的数据。
TLB查询：当需要访问某个虚拟地址时，首先通过翻译后备缓冲区（TLB）查询对应的物理地址。
缓存访问：如果TLB命中，CPU会尝试从缓存中读取数据。如果缓存未命中，则会从下一级缓存或主存中调入数据。
缺页中断：如果访问的虚拟地址没有对应的物理地址映射，则会发生缺页中断。操作系统会为其分配对应的物理内存，并更新页表。
（RGB输出链接到“第一次静音关闭”过程）
AVM内部时间戳：图像输出时间在1.2s以内，则图像输出时间在1.85s内


=================
ASPICE 

ASPICE（Automotive SPICE）将汽车系统研发过程划分为多个过程域，每个过程域包含具体的过程活动。以下是ASPICE的主要过程及其简单说明：

基础生命周期过程（Primary Life Cycle Processes）
ACQ.3 合同协议（Contract Agreement）：

确定并管理与供应商的合同协议。
ACQ.4 供应商监控（Supplier Monitoring）：

监控供应商的绩效，确保其按合同要求交付产品或服务。
SYS.1 需求引出（Requirements Elicitation）：

从客户和利益相关者处收集系统需求。
SYS.2 系统需求分析（System Requirements Analysis）：

分析和定义系统需求，确保其完整性和一致性。
SYS.3 系统架构设计（System Architectural Design）：

设计系统架构，定义系统各部分及其接口。
SYS.4 系统集成和集成测试（System Integration and Integration Test）：

集成系统各部分并进行集成测试，确保系统功能和性能。
SYS.5 系统合格性测试（System Qualification Test）：

验证系统是否满足所有系统需求。
软件工程过程（Software Engineering Processes）
SWE.1 软件需求分析（Software Requirements Analysis）：

分析和定义软件需求，确保其完整性和一致性。
SWE.2 软件架构设计（Software Architectural Design）：

设计软件架构，定义软件各部分及其接口。
SWE.3 软件详细设计和单元构建（Software Detailed Design and Unit Construction）：

详细设计软件单元，并进行单元构建。
SWE.4 软件单元验证（Software Unit Verification）：

验证软件单元是否符合设计要求。
SWE.5 软件集成和集成测试（Software Integration and Integration Test）：

集成软件单元并进行集成测试，确保软件功能和性能。
SWE.6 软件合格性测试（Software Qualification Testing）：

验证集成的软件是否满足所有软件需求。
支持生命周期过程（Supporting Life Cycle Processes）
SUP.1 质量保证（Quality Assurance）：

确保开发过程和产品符合质量标准。
SUP.2 验证（Verification）：

验证产品是否符合需求和设计规范。
SUP.4 联合评审（Joint Review）：

与利益相关者共同评审开发过程和产品。
SUP.7 文档编制（Documentation）：

编制和维护开发过程和产品的文档。
SUP.8 配置管理（Configuration Management）：

管理开发过程中的配置项，确保其一致性和可追溯性。
SUP.9 问题解决管理（Problem Resolution Management）：

识别、跟踪和解决开发过程中的问题。
SUP.10 变更请求管理（Change Request Management）：

管理变更请求，确保变更的有效性和可追溯性。
组织生命周期过程（Organizational Life Cycle Processes）
MAN.3 项目管理（Project Management）：

计划、监控和控制项目，确保项目按时、按预算完成。
PIM.3 过程改进（Process Improvement）：

识别和实施过程改进措施，提升开发过程的效率和质量。
REU.2 重用管理（Reuse Management）：

管理和促进开发过程中组件和知识的重用。
这些过程涵盖了从需求分析到设计、开发、测试、质量保证和项目管理的各个方面，确保软件开发过程的高质量和一致性。如果你有更多问题或需要进一步的解释，请随时告诉我！








